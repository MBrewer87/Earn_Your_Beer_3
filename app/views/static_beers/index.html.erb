<div class="page-header">
  <h1>
    Static Beer List - Maintained by Moderator
      <% if current_user.username == "MBrewer87" %>
        <a href="/static_beers/new" class="btn btn-lg btn-success"><i class="fa fa-plus"></i></a>
      <% end %>
  </h1>
</div>

<!-- Simple table layout example -->

<div class="row">
  <div class="col-md-12">
    <table class="table table-hover">
      <thead>
        <tr>
          <th>Beer Category</th>
          <th>Calories Per Serving (12 oz.)</th>
          <th></th>
          <th></th>
        </tr>
      </thead>

      <tbody>
        <% @static_beers.each do |static_beer| %>
          <tr>
            <td><%= static_beer.beer_cat_name %></td>
            <td><%= static_beer.calpertype %></td>
            <% if current_user.username == "MBrewer87" %>
              <td>
                <a href="/static_beers/<%= static_beer.id %>/edit" class="btn btn-warning">
                  <i class="fa fa-edit"></i>
                </a>
              </td>
              <td>
                <a href="/delete_static_beer/<%= static_beer.id %>" class="btn btn-danger">
                  <i class="fa fa-trash-o"></i>
                </a>
              </td>
            <% end %>
          </tr>
        <% end %>
      </tbody>
    </table>
  </div>
</div>

<!-- End simple table layout example -->

<!-- JavaScript for Isotope layout and quicksearch -->
<script src="//cdnjs.cloudflare.com/ajax/libs/jquery.isotope/2.0.0/isotope.pkgd.min.js"></script>
<script>
  $(function() {
    // quick search regex
    var qsRegex;

    // init Isotope
    var $container = $('.isotope-container').isotope({
      itemSelector: '.isotope-item',
      layoutMode: 'masonry',
      filter: function() {
        return qsRegex ? $(this).text().match( qsRegex ) : true;
      }
    });

    // use value of search field to filter
    var $quicksearch = $('#quicksearch').keyup( debounce( function() {
      qsRegex = new RegExp( $quicksearch.val(), 'gi' );
      $container.isotope();
    }, 200 ) );

  });

  // debounce so filtering doesn't happen every millisecond
  function debounce( fn, threshold ) {
    var timeout;
    return function debounced() {
      if ( timeout ) {
        clearTimeout( timeout );
      }
      function delayed() {
        fn();
        timeout = null;
      }
      timeout = setTimeout( delayed, threshold || 100 );
    }
  }
</script>

<!-- End responsive, Isotope-based layout example -->
